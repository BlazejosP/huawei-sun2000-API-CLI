#!/bin/bash

# Tool for get data from Huawei FusionSolar https://eu5.fusionsolar.huawei.com Kiosk mode
# to made this tool usefully first u must login to FusionSolarApp with your username and password. 
# Open webpage and go to "Kiosk View" top right buttons near "Home Page" "Message" and "About"
# Inside "Kiosk View Settings" activate option "Whether to enable" and copy URL which is necessary
# to be pasted inside this script. Login and Password is not necessary to be used to get this data only
# individual URL for each power plant so this URL should be confidential. After swithing "Whether to 
# enable" On and Off and again On new URL is autogenerated so paste to scipt this new data after changing.

# You must have installed on your linux tools like jq, httpie, grep, curl, mosquitto_pub
# sudo apt-get install jq
# sudo apt-get install httpie
# sudo apt-get install grep
# sudo apt-get install curl
# sudo apt-get install mosquitto-clients

# Configuration section
#----------------------
# Here paste URL from your Kiosk mode configuration "Kiosk View Settings" in FussionSolarApp
kiosk_mode_url="<--here data-->"

#data presentation on terminal screen
# true or false show data on screen is not necessary if you use this script automatically to collect data to other software periodically in automatic mode.
show_data_in_terminal=true

# export to InfluxDB data taken from Kiosk mode Cloud Service 
send_data_to_influxDB=false

if [[ $send_data_to_influxDB == true ]];
	then
	influxdb_server="<--here data-->" #for example "localhost" or "192.168.1.4"
	influxdb_port="<--here data-->" # influxdb input port for example "8086"
	influxdb_database="<--here data-->" #database name for example "solar_panels_data" 
	influxdb_db_insert_user="<--here data-->" # user fith privilge to insert for example "my_root_user" 
	influxdb_db_insert_password="<--here data-->" #for example "secret_password" 
fi



# export to Domoticz directly with use of Domoticz JOSN interface data taken from Kiosk mode Cloud Service 
send_data_to_Domoticz=false
if [[ $send_data_to_Domoticz == true ]];
	then
	# Username&password is set if we do like to insert new data? Is possible to configure domoticz without autentication so this fields mayby in that case left empty
	Domoticz_with_username_and_password=false
		
	if [[ $Domoticz_with_username_and_password == true ]];
	then
		domoticz_username="<--here data-->" #for example "my_root_user"
		domoticz_password="<--here data-->" #for example "secret_password" 
	fi
	
	domtoicz_server="<--here data-->" #for example "localhost" or "192.168.1.4"
	domoticz_port="<--here data-->" #for example "8080"

	#IDX for our data in domoticz for example "111"
	domoticz_device_configuration_idx="167" #Text Sensor for instalation configuration info 
	domoticz_current_power_idx="168" #Usage Electric Sensor for actutual production
	domoticz_daily_power_idx="152" #Daily Electric production Sensor
	domoticz_monthly_power_idx="147" #Monthly Electric production Sensor
	domoticz_yearly_power_idx="169" #Yearly Electric production Sensor
	domoticz_all_power_idx="148" #Total Electric production Sensor
	domoticz_trees_idx="179" #saved trees Sensor
	domoticz_saved_CO2_idx="180" #saved CO2 emissions Sensor
	domoticz_saved_coal_idx="181" #saved coal Sensor

fi

# export with use of MQTT as transport layer to Domoticz data taken from Kiosk mode Cloud Service after modification can be used to send data to any topic what means any software which use MQTT not only Domoticz. 
send_data_to_MQTT=true
MQTT_with_username_and_password=true

if [[ $send_data_to_MQTT == true ]];
	then
	MQTT_server="<--here data-->" #for example "localhost" or "192.168.1.4"
	MQTT_port="" #for example "1883" not necesary if is default one
	MQTT_subject='<--here data-->' #standart topic is 'domoticz/in' for Domoticz connected to MQTT server but can be any suitable for you
	
	if [[ $MQTT_with_username_and_password == true ]];
	then
		MQTT_username='<--here data-->' #for example 'my_root_user'
		MQTT_password='<--here data-->' #for example 'secret_password' 
	fi
	
	#IDX for our data in domoticz for example "111"
	domoticz_device_configuration_idx="167" #Text Sensor for instalation configuration info 
	domoticz_current_power_idx="168" #Usage Electric Sensor for actutual production
	domoticz_daily_power_idx="152" #Daily Electric production Sensor
	domoticz_monthly_power_idx="147" #Monthly Electric production Sensor
	domoticz_yearly_power_idx="169" #Yearly Electric production Sensor
	domoticz_all_power_idx="148" #Total Electric production Sensor
	domoticz_trees_idx="179" #saved trees Sensor
	domoticz_saved_CO2_idx="180" #saved CO2 emissions Sensor
	domoticz_saved_coal_idx="181" #saved coal Sensor
fi

#----------------------





# extract token from url
token=`echo "$kiosk_mode_url" | grep -o 'kk=[[:digit:]].*'`
token=`echo "$token" | grep -o '[[:digit:]].*'`

# echo $token

echo -e "conecting to \e[4m"$kiosk_mode_url"\e[24m"

# Request to unofficial API checkKioskToken
checkKioskToken=$(printf '{"kk": "'$token'"}'| http --follow --timeout 3600 POST https://eu5.fusionsolar.huawei.com/kiosk/checkKioskToken Content-Type:'application/json')

#data which is possible to get from this API request checkKioskToken
createTime=( $(echo ''$checkKioskToken''  | jq '.data.createTime' ) ) #Time of swith on Kiosk Mode
id=( $(echo ''$checkKioskToken''  | jq '.data.id' ) ) # id number unknow meaning
language=( $(echo ''$checkKioskToken''  | jq '.data.language' ) ) # individual setings for Language in Kiosk Mode
logoFileId=( $(echo ''$checkKioskToken''  | jq '.data.logoFileId' ) ) # individual code for picture of Logo
permissons="( $(echo ''$checkKioskToken''  | jq '.data.permissons[]' ) )" #Kiosk Mode which panels are on in future meaby configurable by Kiosk Mode options FusionSolaAPP now is impassible to change anything
state=( $(echo ''$checkKioskToken''  | jq '.data.state' ) ) #boolean
stationName="( $(echo ''$checkKioskToken''  | jq '.data.stationName' ) )" #Name of Station configured in Kiosk Mode options FusionSolarAPP 
title=( $(echo ''$checkKioskToken''  | jq '.data.title' ) ) #Title of Kiosk Mode in my case empty
token_of_the_station=( $(echo ''$checkKioskToken''  | jq '.data.token' ) ) #Token the same which was used to open Kiosk Mode
updateTime=( $(echo ''$checkKioskToken''  | jq '.data.updateTime' ) ) #Time of last changes in Kiosk Mode

if [ -z "$createTime" ]
	then
		echo ""
		echo "Wrong token in kiosk mode url: $token"
		echo "can't conect to Kiosk Mode check url"
		echo "Not posible to capture any data :("
		exit
	fi

# echo $checkKioskToken | jq
# echo $stationName

# show array with aviable panels array
# echo $checkKioskToken | jq '.data.permissons[]'
# 
# permissons=( $(echo $checkKioskToken | jq '.data.permissons[7]') )

# echo $permissons


# shorter time for read in unix cut -3 characters from unix date milisecounds are not necessary
createTime=$(echo ${createTime::-3})

# echo $createTime 
# create_data=$(date -d @$createTime)
# echo $create_data

# shorter time for read in unix cut -3 characters from unix date milisecounds are not necessary
updateTime=$(echo ${updateTime::-3})

# echo $updateTime
# update_data=$(date -d @$updateTime)
# echo $update_data







# Request to unofficial API getStationInfo
getStationInfo=$(printf '{"kk": "'$token'"}'| http --follow --timeout 3600 POST https://eu5.fusionsolar.huawei.com/kiosk/getStationInfo Content-Type:'application/json')

# echo $getStationInfo | jq

#data which  is possible to get from this API request getStationInfo
stationAddr="( $(echo ''$getStationInfo''  | jq ".data.stationAddr" ) )" # Adress of station if given in FusionSolarAPP
stationCode=( $(echo ''$getStationInfo''  | jq '.data.stationCode' ) ) # individual code
# stationName=( $(echo ''$getStationInfo''  | jq '.data.stationName' ) ) #aleady existing in previous request checkKioskToken
stationPic=( $(echo ''$getStationInfo''  | jq '.data.stationPic' ) ) # individual code for picture
timeZone=( $(echo ''$getStationInfo''  | jq '.data.timeZone' ) ) # number but unknow relation with timezones for UTC+1 shows 8

# printf '%s\n' $stationAddr
# printf '%s\n' "$stationName"


# Request to unofficial API getRealTimeKpi
getRealTimeKpi=$(printf '{"kk": "'$token'"}'| http --follow --timeout 3600 POST https://eu5.fusionsolar.huawei.com/kiosk/getRealTimeKpi Content-Type:'application/json')

# echo $getRealTimeKpi | jq

#data which  is possible to get from this API request getRealTimeKpi
curPower=( $(echo ''$getRealTimeKpi''  | jq '.data.curPower' ) ) # in Kw 
dailyCapacity=( $(echo ''$getRealTimeKpi''  | jq '.data.dailyCapacity' ) ) # in Kw/h 
monthCapacity=( $(echo ''$getRealTimeKpi''  | jq '.data.monthCapacity' ) ) # in Kw/h 
yearCapacity=( $(echo ''$getRealTimeKpi''  | jq '.data.yearCapacity' ) ) # in Kw/h 
allCapacity=( $(echo ''$getRealTimeKpi''  | jq '.data.allCapacity' ) ) # in Kw/h

#echo $dailyCapacity


# Request to unofficial API socialContribution
socialContribution=$(printf '{"kk": "'$token'"}'| http --follow --timeout 3600 POST https://eu5.fusionsolar.huawei.com/kiosk/socialContribution Content-Type:'application/json')

# echo $socialContribution | jq

#data which  is possible to get from this API request socialContribution
forest=( $(echo ''$socialContribution''  | jq '.data.forest' ) ) # saved trees number
CO2=( $(echo ''$socialContribution''  | jq '.data.CO2' ) ) # tons
coal=( $(echo ''$socialContribution''  | jq '.data.coal' ) ) # tons

# echo $coal


# Request to unofficial API getPowers
getPowers=$(printf '{"kk": "'$token'"}'| http --follow --timeout 3600 POST https://eu5.fusionsolar.huawei.com/kiosk/getPowers Content-Type:'application/json')

# echo $getPowers | jq

#hours_with_minutes=( $(echo ''$getPowers''  | jq '.data.xData[]' ) )

#data which  is possible to get from this API request sgetPowers
hasInverter=( $(echo ''$getPowers''  | jq '.data.hasInverter' ) ) #boolean
hasEnergyStore=( $(echo ''$getPowers''  | jq '.data.hasEnergyStore' ) ) #boolean
hasMeter=( $(echo ''$getPowers''  | jq '.data.hasMeter' ) ) #boolean
hasRadiationDose=( $(echo ''$getPowers''  | jq '.data.hasRadiationDose' ) ) #boolean
hasUserPower=( $(echo ''$getPowers''  | jq '.data.hasUserPower' ) ) #boolean
show15MData=( $(echo ''$getPowers''  | jq '.data.show15MData' ) ) #boolean

# echo $hasInverter
# echo $show15MData

echo ""
echo "Existing devices in this installation:"

	if [[ $hasInverter == true ]];

		then
		echo -e "[\e[32m+\e[0m] Inverter Huawei SUN2000-M0"
		# first data just a variable taken from JOSN
		inverterCaps=( $(echo ''$getPowers''  | jq '.data.inverterCaps' ) ) 
		# conversion from JOSN to bash array for hours with minutes
		count_hours_with_minutes=0

			for s in 1; do 
				hours_with_minutes_array+=( $(echo ''$getPowers''  | jq '.data.xData[]' | grep -o '[[:digit:]][[:digit:]]:[[:digit:]][[:digit:]]') )
				(( count_hours_with_minutes++ ))
			done

		# Print array of hours&minutes number of slots
		# echo ${#hours_with_minutes_array[@]}
		# Print array of hours&minutes 
		# printf '%s\n' "${hours_with_minutes_array[@]}"

		# conversion from JOSN to bash array for inverted power for every 5 minutes
		count_inverted_KW=0

			for s in 1; do 
				inverted_KW_array+=( $(echo ''$getPowers''  | jq '.data.inverterPowers[]' | grep -o '"*.*"') )
				(( count_inverted_KW++ ))
			done

		# Print array of inverted KW number of slots
 		# echo ${#inverted_KW_array[@]}
		# Print array of inverted KW
		# printf '%s\n' "${inverted_KW_array[@]}"
		
		else		
		echo -e "[\e[31m-\e[0m] Inverter Huawei SUN2000-M0"
	fi

	if [[ $hasEnergyStore == true ]];
	
		then
		 # don't know what exactly should be here has no energy store to test API response and how JOSN look's like if Energy storage exists so this is only estimation what variables are aviable based on response of instalation without energy storage
		echo -e "[\e[32m+\e[0m] Energy battery Storage LG Chem HV or Huawei LUNA"
		energyStoreInputCaps=( $(echo ''$getPowers''  | jq '.data.energyStoreInputCaps' ) )
		energyStoreInputPowers=( $(echo ''$getPowers''  | jq '.data.energyStoreInputPowers' ) ) 
		energyStoreOutputCaps=( $(echo ''$getPowers''  | jq '.data.energyStoreOutputCaps' ) ) 
		energyStoreOutputPowers=( $(echo ''$getPowers''  | jq '.data.energyStoreOutputPowers' ) ) 	 
		else		
		echo -e "[\e[31m-\e[0m] Energy battery Storage LG Chem HV or Huawei LUNA"
	fi
	
	if [[ $hasMeter == true ]];
	
		then
		 # don't know what exactly should be here has no meter to test API response and how JOSN look's like if meter exists so this is only estimation what variables are aviable based on response of instalation without this device
		echo -e "[\e[32m+\e[0m] Smart Power Sensor (DDSU666-H) "
		meterInputCaps=( $(echo ''$getPowers''  | jq '.data.meterInputCaps' ) )
		meterInputPowers=( $(echo ''$getPowers''  | jq '.data.meterInputPowers' ) ) 
		meterOutputCaps=( $(echo ''$getPowers''  | jq '.data.meterOutputCaps' ) ) 
		meterOutputPowers=( $(echo ''$getPowers''  | jq '.data.meterOutputPowers' ) )  
		else		
		echo -e "[\e[31m-\e[0m] Smart Power Sensor (DDSU666-H) "
	fi
	
	if [[ $hasRadiationDose == true ]];
	
		then
		 # don't know what exactly should be here has no Huawei Solar Radiation Dosimeter to test API response and how JOSN look's like if device exists so this is only estimation what variables are aviable based on response of instalation without this device
		echo -e "[\e[32m+\e[0m] Solar radiation sensor "
		radiationDosePowers=( $(echo ''$getPowers''  | jq '.data.radiationDosePowers' ) )
		else		
		echo -e "[\e[31m-\e[0m] Solar radiation sensor "
	fi
	
	if [[ $hasUserPower == true ]];
	
		then
		 # don't know what exactly should be here has no User Power Mesuring device to test API response and how JOSN look's like if device exists so this is only estimation what variables are aviable based on response of instalation without this device
		echo -e "[\e[32m+\e[0m] SmartLogger 3000"
		userPowers=( $(echo ''$getPowers''  | jq '.data.userPowers' ) )
		selfUserPowers=( $(echo ''$getPowers''  | jq '.data.selfUserPowers' ) )
		stationProuductAndUserPower=( $(echo ''$getPowers''  | jq '.data.stationProuductAndUserPower' ) )
		expendPowers=( $(echo ''$getPowers''  | jq '.data.expendPowers' ) )
		else		
		echo -e "[\e[31m-\e[0m] SmartLogger 3000"
	fi


# If variable in config is true show data from kiosk mode on terminal screen
if [[ $show_data_in_terminal == true ]];
	then
	
	
	echo ""
	# unofficial API getStationInfo
	echo "station name: "$stationName
	echo "title: "$title
	# unofficial API getStationInfo
	echo "station adress: "$stationAddr
	
	# unofficial API checkKioskToken
	#time_of_creation=$(date -d @$createTime)
	# echo "time&date of Kiosk Mode switched on: "$time_of_creation
	#time_of_update=$(date -d @$updateTime)	
	# echo "time&date of last modification in Kiosk Mode: "$time_of_update
	# echo ""
	# echo "id: "$id
	# echo "language: "$language
	# echo "logo id: "$logoFileId
	# echo "Active panels: "$permissons
	# echo "state: "$state
	echo "token of station: "$token_of_the_station	

	# unofficial API getStationInfo
	#echo ""	
	#echo "station code: "$stationCode
	#echo "station picture id: "$stationPic
	#echo "timezone code: "$timeZone
	
	# unofficial API getRealTimeKpi
	echo ""
	echo -e "current power: \e[93m"$curPower" Kw\e[0m" 
	echo -e "daily capacity: \e[93m"$dailyCapacity" Kw/h\e[0m" 
	echo -e "monthly capacity: \e[93m"$monthCapacity" Kw/h\e[0m" 
	echo -e "yearly capacity: \e[93m"$yearCapacity" Kw/h\e[0m" 
	echo -e "all capacity: \e[93m"$allCapacity" Kw/h\e[0m"
	
	# unofficial API socialContribution
	echo ""
	echo -e "\e[32mtrees saved: "$forest" trees\e[0m"
	echo -e "\e[94msaved CO2: "$CO2"t\e[0m"
	echo -e "\e[90msaved coal: "$coal"t\e[0m"
	
	echo ""
	echo "Today Power Production"
	echo ""

	# diplay today power production every 5 minutes 
	count_every_5_minutes=0
	for s in "${hours_with_minutes_array[@]}"; do 

		if [[ ${inverted_KW_array[$count_every_5_minutes]} != "\"-"\" ]];
			then
			echo -n "|" ${hours_with_minutes_array[$count_every_5_minutes]} ${inverted_KW_array[$count_every_5_minutes]}		
		fi
											
		(( count_every_5_minutes++ ))
	done
	
	echo ""
	
	else
	echo ""
	echo "Data presentation in terminal is off"
fi

# If variable in config is true insert data to influxDB database
if [[ $send_data_to_influxDB == true ]];
	then
	
	echo ""
	echo "Inserting data into influxDB"
	
	# Which devices are aviable in our installation section	
	#Device which is aviable in your setup: has Inverter avaiable etc.
	curl -i -XPOST 'http://'$influxdb_server':'$influxdb_port'/write?db='$influxdb_database'&u='$influxdb_db_insert_user'&p='$influxdb_db_insert_password'&precision=s' --data-binary 'Power=hasinverter value='$hasInverter''
	#Device which is aviable in your setup: has Power Storage avaiable
	curl -i -XPOST 'http://'$influxdb_server':'$influxdb_port'/write?db='$influxdb_database'&u='$influxdb_db_insert_user'&p='$influxdb_db_insert_password'&precision=s' --data-binary 'Power=hasEnergyStore value='$hasEnergyStore''
	#Device which is aviable in your setup: Huawei Power meter avaiable
	curl -i -XPOST 'http://'$influxdb_server':'$influxdb_port'/write?db='$influxdb_database'&u='$influxdb_db_insert_user'&p='$influxdb_db_insert_password'&precision=s' --data-binary 'Power=hasMeter value='$hasMeter''
	#Device which is aviable in your setup: Solar Radiation meter
	curl -i -XPOST 'http://'$influxdb_server':'$influxdb_port'/write?db='$influxdb_database'&u='$influxdb_db_insert_user'&p='$influxdb_db_insert_password'&precision=s' --data-binary 'Power=hasRadiationDose value='$hasRadiationDose''
	#Device which is aviable in your setup: User Power consuption meter
	curl -i -XPOST 'http://'$influxdb_server':'$influxdb_port'/write?db='$influxdb_database'&u='$influxdb_db_insert_user'&p='$influxdb_db_insert_password'&precision=s' --data-binary 'Power=hasUserPower value='$hasUserPower''
	
	
	#power data section	
	#actual power production every 5 minutes
	curl -i -XPOST 'http://'$influxdb_server':'$influxdb_port'/write?db='$influxdb_database'&u='$influxdb_db_insert_user'&p='$influxdb_db_insert_password'&precision=s' --data-binary 'Power=curPower_every5_min value='$curPower''
	#daily power production every 5 minutes
	curl -i -XPOST 'http://'$influxdb_server':'$influxdb_port'/write?db='$influxdb_database'&u='$influxdb_db_insert_user'&p='$influxdb_db_insert_password'&precision=s' --data-binary 'Power=dailyCapacity_every5_min value='$dailyCapacity''
	#monthly power production every 5 minutes
	curl -i -XPOST 'http://'$influxdb_server':'$influxdb_port'/write?db='$influxdb_database'&u='$influxdb_db_insert_user'&p='$influxdb_db_insert_password'&precision=s' --data-binary 'Power=monthCapacity_every5_min value='$monthCapacity''
	#yearly power production every 5 minutes
	curl -i -XPOST 'http://'$influxdb_server':'$influxdb_port'/write?db='$influxdb_database'&u='$influxdb_db_insert_user'&p='$influxdb_db_insert_password'&precision=s' --data-binary 'Power=yearCapacity_every5_min value='$yearCapacity''
	#All total power production every 5 minutes
	curl -i -XPOST 'http://'$influxdb_server':'$influxdb_port'/write?db='$influxdb_database'&u='$influxdb_db_insert_user'&p='$influxdb_db_insert_password'&precision=s' --data-binary 'Power=allCapacity_every5_min value='$allCapacity''
	
	#social contribution section	
	#trees saved number
	curl -i -XPOST 'http://'$influxdb_server':'$influxdb_port'/write?db='$influxdb_database'&u='$influxdb_db_insert_user'&p='$influxdb_db_insert_password'&precision=s' --data-binary 'Power=trees_saved_total value='$forest''
	#Co2 reduction number
	curl -i -XPOST 'http://'$influxdb_server':'$influxdb_port'/write?db='$influxdb_database'&u='$influxdb_db_insert_user'&p='$influxdb_db_insert_password'&precision=s' --data-binary 'Power=Co2_reduction_total value='$CO2''
	#coal reduction number
	curl -i -XPOST 'http://'$influxdb_server':'$influxdb_port'/write?db='$influxdb_database'&u='$influxdb_db_insert_user'&p='$influxdb_db_insert_password'&precision=s' --data-binary 'Power=coal_reduction_total value='$coal''
	
fi



# If variable in config section on top is true insert data to Domoticz directly
if [[ $send_data_to_Domoticz == true ]];
	then
	
	echo ""
	echo "Inserting data into Domoticz"
	
	# Preparing data for domoticz insert
	if [[ $hasInverter == true ]];
		then
		Inverter="Inverter:%20Yes;"	
	else
		Inverter="Inverter%20No;"
	fi
	
	if [[ $hasEnergyStore == true ]];
		then
		EnergyStore="Energy%20Storage:%20Yes;"	
	else
		EnergyStore="Energy%20Storage:%20No;"
	fi
	
	if [[ $hasMeter == true ]];
		then
		Meter="Huawei%20Meter:%20Yes;"	
	else
		Meter="Huawei%20Meter:%20No;"
	fi
		
	if [[ $hasRadiationDose == true ]];
		then
		RadiationDose="Solar%20Radiation%20Dosimeter:%20Yes;"	
	else
		RadiationDose="Solar%20Radiation%20Dosimeter:%20No;"
	fi
		
	if [[ $hasUserPower == true ]];
		then
		UserPower="User%20consumption%20Mesuring:%20Yes;"	
	else
		UserPower="User%20consumption%20Mesuring:%20No;"
	fi
	
	# Which devices are aviable in our installation	
	if [[ $Domoticz_with_username_and_password == true ]];
		then
		#Description of devices configuration	
		curl -i  -H "Content-Type: application/json" "http://$domoticz_username:$domoticz_password@$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_device_configuration_idx&nvalue=0&svalue="$Inverter+$EnergyStore+$Meter+$RadiationDose+$UserPower""
		
		#Actual production refreshed every 5min
		# integer with value just for domoticz energy counter ther is no float in bash that is why we use an bc tool to multiply float number we done this because domoticz sensor acepts data in W not in Kw 	
		currentPowerforDomoticz=$(echo $(bc -l <<<"${curPower}*1000"))
		currentPowerforDomoticz_after_modifications=$(echo ${currentPowerforDomoticz::-4})
		#echo $currentPowerforDomoticz_after_modifications
		curl -i  -H "Content-Type: application/json" "http://$domoticz_username:$domoticz_password@$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_current_power_idx&nvalue=0&svalue=$currentPowerforDomoticz_after_modifications"
		
		#today production refreshed every 5min
		if [[ $dailyCapacity == "0" ]];
			then
			dailyPowerforDomoticz_after_modifications2=0
		else
			dailyPowerforDomoticz=$(echo $(bc -l <<<"${dailyCapacity}*1000"))
			dailyPowerforDomoticz_after_modifications=$(echo ${dailyPowerforDomoticz::-3})
			dailyPowerforDomoticz_after_modifications2=$(($dailyPowerforDomoticz_after_modifications/2))
			#echo $dailyPowerforDomoticz_after_modifications2
		fi
		curl -i  -H "Content-Type: application/json" "http://$domoticz_username:$domoticz_password@$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_daily_power_idx&svalue=$dailyPowerforDomoticz_after_modifications2"
		
		#monthly production refreshed every 5min
		if [[ $monthCapacity == "0" ]];
			then
			monthlyPowerforDomoticz_after_modifications2=0
		else
			monthlyPowerforDomoticz=$(echo $(bc -l <<<"${monthCapacity}*1000"))
			monthlyPowerforDomoticz_after_modifications=$(echo ${monthlyPowerforDomoticz::-3})
			monthlyPowerforDomoticz_after_modifications2=$(($monthlyPowerforDomoticz_after_modifications/2))
			#echo $monthlyPowerforDomoticz_after_modifications2
		fi
		curl -i  -H "Content-Type: application/json" "http://$domoticz_username:$domoticz_password@$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_monthly_power_idx&svalue=$monthlyPowerforDomoticz_after_modifications2"
		
		#yearly production refreshed every 5min
		if [[ $yearCapacity == "0" ]];
			then
			yearlyPowerforDomoticz_after_modifications2=0
		else
			yearlyPowerforDomoticz=$(echo $(bc -l <<<"${yearCapacity}*1000"))
			yearlyPowerforDomoticz_after_modifications=$(echo ${yearlyPowerforDomoticz::-3})
			yearlyPowerforDomoticz_after_modifications2=$(($yearlyPowerforDomoticz_after_modifications/2))
			#echo $yearlyPowerforDomoticz_after_modifications
		fi
		curl -i  -H "Content-Type: application/json" "http://$domoticz_username:$domoticz_password@$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_yearly_power_idx&svalue=$yearlyPowerforDomoticz_after_modifications2"
		
		#all production refreshed every 5min
		if [[ $allCapacity == "0" ]];
			then
			allPowerforDomoticz_after_modifications2=0
		else
			allPowerforDomoticz=$(echo $(bc -l <<<"${allCapacity}*1000"))
			allPowerforDomoticz_after_modifications=$(echo ${allPowerforDomoticz::-3})
			allPowerforDomoticz_after_modifications2=$(($allPowerforDomoticz_after_modifications/2))
			#echo $allPowerforDomoticz_after_modifications2
		fi
		curl -i  -H "Content-Type: application/json" "http://$domoticz_username:$domoticz_password@$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_all_power_idx&svalue=$allPowerforDomoticz_after_modifications2"
		
		#social contribution section	
		#trees saved number
		curl -i  -H "Content-Type: application/json" "http://$domoticz_server:$domoticz_password@$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_trees_idx&nvalue=0&svalue=$forest"		
		#Co2 reduction number
		curl -i  -H "Content-Type: application/json" "http://$domoticz_server:$domoticz_password@$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_saved_CO2_idx&nvalue=0&svalue=$CO2"		
		#coal reduction number
		curl -i  -H "Content-Type: application/json" "http://$domoticz_server:$domoticz_password@$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_saved_coal_idx&nvalue=0&svalue=$coal"

	else
		#Description of devices configuration	
		curl -i  -H "Content-Type: application/json" "http://$domoticz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_device_configuration_idx&nvalue=0&svalue="$Inverter+$EnergyStore+$Meter+$RadiationDose+$UserPower""
		
		#Actual production refreshed every 5min
		# integer with value just for domoticz energy counter ther is no float in bash that is why we use an bc tool to multiply float number we done this because domoticz sensor acepts dat in W not in Kw 	
		currentPowerforDomoticz=$(echo $(bc -l <<<"${curPower}*1000"))
		currentPowerforDomoticz_after_modifications=$(echo ${currentPowerforDomoticz::-4})
		#echo $currentPowerforDomoticz_after_modifications
		curl -i  -H "Content-Type: application/json" "http://$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_current_power_idx&nvalue=0&svalue=$currentPowerforDomoticz_after_modifications"
		
		#today production refreshed every 5min
		if [[ $dailyCapacity == "0" ]];
			then
			dailyPowerforDomoticz_after_modifications2=0
		else
			dailyPowerforDomoticz=$(echo $(bc -l <<<"${dailyCapacity}*1000"))
			dailyPowerforDomoticz_after_modifications=$(echo ${dailyPowerforDomoticz::-3})
			dailyPowerforDomoticz_after_modifications2=$(($dailyPowerforDomoticz_after_modifications/2))
			#echo "Today Production "$dailyPowerforDomoticz_after_modifications2
		fi
		curl -i  -H "Content-Type: application/json" "http://$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_daily_power_idx&svalue=$dailyPowerforDomoticz_after_modifications2"
		
		#monthly production refreshed every 5min
		if [[ $monthCapacity == "0" ]];
			then
			monthlyPowerforDomoticz_after_modifications2=0
		else
			monthlyPowerforDomoticz=$(echo $(bc -l <<<"${monthCapacity}*1000"))
			monthlyPowerforDomoticz_after_modifications=$(echo ${monthlyPowerforDomoticz::-3})
			monthlyPowerforDomoticz_after_modifications2=$(($monthlyPowerforDomoticz_after_modifications/2))
			#echo "Monthly Production "$monthlyPowerforDomoticz_after_modifications2
		fi
		curl -i  -H "Content-Type: application/json" "http://$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_monthly_power_idx&svalue=$monthlyPowerforDomoticz_after_modifications2"
		
		#yearly production refreshed every 5min
		if [[ $yearCapacity == "0" ]];
			then
			yearlyPowerforDomoticz_after_modifications2=0
		else
			yearlyPowerforDomoticz=$(echo $(bc -l <<<"${yearCapacity}*1000"))
			yearlyPowerforDomoticz_after_modifications=$(echo ${yearlyPowerforDomoticz::-3})
			yearlyPowerforDomoticz_after_modifications2=$(($yearlyPowerforDomoticz_after_modifications/2))
			#echo $yearlyPowerforDomoticz_after_modifications2
		fi
		curl -i  -H "Content-Type: application/json" "http://$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_yearly_power_idx&svalue=$yearlyPowerforDomoticz_after_modifications2"
		
		#all production refreshed every 5min
		if [[ $allCapacity == "0" ]];
			then
			allPowerforDomoticz_after_modifications2=0
		else
			allPowerforDomoticz=$(echo $(bc -l <<<"${allCapacity}*1000"))
			allPowerforDomoticz_after_modifications=$(echo ${allPowerforDomoticz::-3})
			allPowerforDomoticz_after_modifications2=$(($allPowerforDomoticz_after_modifications/2))
			#echo $allPowerforDomoticz_after_modifications2
		fi
		curl -i  -H "Content-Type: application/json" "http://$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_all_power_idx&svalue=$allPowerforDomoticz_after_modifications2"
		
		#social contribution section	
		#trees saved number
		curl -i  -H "Content-Type: application/json" "http://$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_trees_idx&nvalue=0&svalue=$forest"		
		#Co2 reduction number
		curl -i  -H "Content-Type: application/json" "http://$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_saved_CO2_idx&nvalue=0&svalue=$CO2"		
		#coal reduction number
		curl -i  -H "Content-Type: application/json" "http://$domtoicz_server:$domoticz_port/json.htm?type=command&param=udevice&idx=$domoticz_saved_coal_idx&nvalue=0&svalue=$coal"

	fi
	
fi


# If variable in config section on top is true send data with use of MQTT
if [[ $send_data_to_MQTT == true ]];
	then
	
	echo ""
	echo "Sending data with use of MQTT "
	
	# Preparing data for domoticz insert through MQTT
	if [[ $hasInverter == true ]];
		then
		Inverter="Inverter Huawei SUN2000-M0"	
	fi
	
	if [[ $hasEnergyStore == true ]];
		then
		Inverter=$Inverter+"| Energy battery Storage LG Chem HV or Huawei LUNA"	
	fi
	
	if [[ $hasMeter == true ]];
		then
		Inverter=$Inverter" | Smart Power Sensor (DDSU666-H)"	
	fi
		
	if [[ $hasRadiationDose == true ]];
		then
		Inverter=$Inverter" | Solar radiation sensor"	
	fi
		
	if [[ $hasUserPower == true ]];
		then
		Inverter=$Inverter" |  SmartLogger 3000"	
	fi
	
	#echo $Inverter
	
	#
	# Text sensor and comunicate about which devices are in our instalation
	mosquitto_pub -h $MQTT_server -m "{\"idx\" : $domoticz_device_configuration_idx, \"nvalue\" : 0, \"svalue\" : \"$Inverter\"}" -t $MQTT_subject -u $MQTT_username -P $MQTT_password
	
	
	# Power Production
	# this sensor is in W that is why we multiply by 1000
	CurrentPower=`echo ''$curPower'*1000' | bc -l`	
	# Electricity sensor Curent power every 5min in W
	mosquitto_pub -h $MQTT_server -m "{\"idx\" : $domoticz_current_power_idx, \"nvalue\" : 0, \"svalue\" : \"$CurrentPower\"}" -t $MQTT_subject -u $MQTT_username -P $MQTT_password
	
	# Electricity sensor daily power every 5min in Kw
	mosquitto_pub -h $MQTT_server -m "{\"idx\" : $domoticz_daily_power_idx, \"nvalue\" : 0, \"svalue\" : \"$dailyCapacity\"}" -t $MQTT_subject -u $MQTT_username -P $MQTT_password
	
	# Electricity sensor monthly power every 5min in Kw
	mosquitto_pub -h $MQTT_server -m "{\"idx\" : $domoticz_monthly_power_idx, \"nvalue\" : 0, \"svalue\" : \"$monthCapacity\"}" -t $MQTT_subject -u $MQTT_username -P $MQTT_password
	
	# Electricity sensor yearly power every 5min in Kw
	mosquitto_pub -h $MQTT_server -m "{\"idx\" : $domoticz_yearly_power_idx, \"nvalue\" : 0, \"svalue\" : \"$yearCapacity\"}" -t $MQTT_subject -u $MQTT_username -P $MQTT_password
	
	# Electricity sensor all total power every 5min in Kw
	mosquitto_pub -h $MQTT_server -m "{\"idx\" : $domoticz_all_power_idx, \"nvalue\" : 0, \"svalue\" : \"$allCapacity\"}" -t $MQTT_subject -u $MQTT_username -P $MQTT_password
	
	
	# Social contribution
	# saved trees Sensor every 5min in trees
	mosquitto_pub -h $MQTT_server -m "{\"idx\" : $domoticz_trees_idx, \"nvalue\" : 0, \"svalue\" : \"$forest\"}" -t $MQTT_subject -u $MQTT_username -P $MQTT_password
	
	# saved CO2 emissions Sensor every 5min in tons
	mosquitto_pub -h $MQTT_server -m "{\"idx\" : $domoticz_saved_CO2_idx, \"nvalue\" : 0, \"svalue\" : \"$CO2\"}" -t $MQTT_subject -u $MQTT_username -P $MQTT_password
	
	# saved coal Sensor every 5min in tons
	mosquitto_pub -h $MQTT_server -m "{\"idx\" : $domoticz_saved_coal_idx, \"nvalue\" : 0, \"svalue\" : \"$coal\"}" -t $MQTT_subject -u $MQTT_username -P $MQTT_password

fi
